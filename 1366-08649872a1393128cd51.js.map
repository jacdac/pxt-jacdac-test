{"version":3,"file":"1366-08649872a1393128cd51.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AA+BA,uBAKG,CACC,GAAM,oBAAN,MACA,GAAM,2BAA0BA,+CAAQ,CAAxC,CAAwC,CAAxC,CACA,GAAM,mBAAkBA,+CAAQ,CAAhC,SAAgC,CAAhC,CACA,GAAM,CAAEC,KAAK,CAAP,4BAA4CC,IAAI,EAAtD,GACA,GAAMC,CAAAA,IAAI,CAAGC,iHAAuC,CAApD,2DAAoD,CAApD,CACA,GAAMC,CAAAA,QAAQ,CAAGF,IAAI,CAAJA,KAAAA,CAAjB,MAAiBA,CAAjB,CACA,GAAMG,CAAAA,OAAO,CAAGH,IAAI,CAAJA,KAAAA,CAAhB,cAAgBA,CAAhB,CAEAI,oEAAc,+GAAC,WAAY,CACvB,GAAMC,CAAAA,GAAG,CAAGC,iFAAAA,CACRC,yGADQD,CAERE,0EAAM,CAACC,6GAAD,CAAsB,CAFhC,GAEgC,CAAtB,CAFEH,CAAZ,CAIA,GAAMI,CAAAA,IAAI,MAASC,CAAAA,OAAO,CAAPA,yBAAAA,CAAnB,GAAmBA,CAAnB,CACA,GAAM,iCAAuCD,IAAI,CAAJA,QAAAA,CACzCD,yHADyCC,CAA7C,CAIAE,OAAO,CAAC,yBAARA,KAAQ,CAAD,CAAPA,CAVU,GAWX,SAXHR,QAWG,CAXW,CAAdA,CAaAS,gDAAS,CACL,IACIF,OADJ,OACIA,EAAAA,OADJ,SACIA,CADJ,MACIA,CAAAA,OAAO,CAAPA,SAAAA,CAAAA,kEAAAA,CAAqCN,GAAD,EAAiB,CACjD,GAAMS,CAAAA,GAAG,CAAGT,GAAG,CAAf,eACA,GAAIS,GAAG,GAAKP,6GAAZ,CAA+B,CAC3BQ,WAAW,CAACC,EAAE,EAAIA,EAAE,CAApBD,CAAW,CAAXA,CAEP,CAPA,CAEDJ,CAFC,CAQL,CARJE,OAQI,CARK,CAATA,CAWA,mBACI,mIACI,kHAAW,KAAK,SAASf,KAAK,EAAImB,GAAG,CAArB,qBAAhB,OACKnB,KAAK,EAAImB,GAAG,CADjB,kBADJ,GACI,CADJ,cAII,sHAAYC,KAAK,GAALA,SAAAA,CAAAA,KAAAA,CAJhB,EAII,CAJJ,cAKI,sHACKC,IAAI,GAAJA,SAAAA,CACKC,iEAAU,UAAVA,IAAU,CAAVA,CADLD,WACKC,EADLD,CANT,EAKI,CALJ,cAUI,sHACKE,YAAY,GAAZA,SAAAA,CACKD,iEAAU,SAAVA,YAAU,CAAVA,CADLC,WACKD,EADLC,CAZb,EAWQ,CAVJ,CADJ,CAoBJ,CAAe,6BAAqD,CAChE,GAAM,kBAAN,MAEA,GAAMC,CAAAA,aAAa,CAAGC,wEAAW,SAAUC,qGAAV,CAAjC,CACA,GAAM,QAAUC,4FAAwB,eAAxC,KAAwC,CAAxC,CAEA,GAAIP,KAAK,GAAT,UACI,mBAAO,mIAAgC,QAAQ,CAA/C,aAAO,EAAP,CAEJ,mBACI,kHAAO,IAAI,CAAX,SACKQ,KAAK,CAACR,KAAK,CAAXQ,MAAK,CAALA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAEQ,oBACD,0DACI,OAAO,CADX,QAEI,GAAG,CAFP,EAGI,GAAG,CAHP,EAII,KAAK,CAAER,KAAK,CAJhB,CAIgB,CAJhB,CAKI,OAAO,CAV3B,OAKgB,EAHPQ,CADL,CADJ,CAeH","sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardGPIO.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport {\n    GPIOCapabilities,\n    GPIOCmd,\n    GPIOCmdPack,\n    GPIOMode,\n    GPIOReg,\n} from \"../../../jacdac-ts/jacdac-spec/dist/specconstants\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport useRegister from \"../hooks/useRegister\"\nimport DashboardRegisterValueFallback from \"./DashboardRegisterValueFallback\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { Table, TableCell, TableRow } from \"@mui/material\"\nimport { JDService } from \"../../../jacdac-ts/src/jdom/service\"\nimport useEffectAsync from \"../useEffectAsync\"\nimport { jdpack } from \"../../../jacdac-ts/src/jdom/pack\"\nimport { Packet } from \"../../../jacdac-ts/src/jdom/packet\"\nimport {\n    COMMAND_RECEIVE,\n    SRV_GPIO,\n    prettyEnum,\n} from \"../../../jacdac-ts/src/jacdac\"\nimport { useServiceSpecificationFromServiceClass } from \"../../jacdac/useServiceSpecification\"\n\ninterface GPIOPinInfo {\n    hwPin: number\n    capabilities: GPIOCapabilities\n    mode: GPIOMode\n    label: string\n}\n\nfunction PinItem(props: {\n    service: JDService\n    pin: number\n    state: number\n    visible: boolean\n}) {\n    const { service, pin, state } = props\n    const [changeId, setChangeId] = useState(0)\n    const [info, setInfo] = useState<GPIOPinInfo>(undefined)\n    const { label = \"\", mode, capabilities, hwPin } = info || {}\n    const spec = useServiceSpecificationFromServiceClass(SRV_GPIO)\n    const modeSpec = spec.enums[\"Mode\"]\n    const capSpec = spec.enums[\"Capabilities\"]\n\n    useEffectAsync(async () => {\n        const pkt = Packet.from(\n            GPIOCmd.PinInfo,\n            jdpack(GPIOCmdPack.PinInfo, [pin])\n        )\n        const resp = await service.sendCmdAwaitResponseAsync(pkt)\n        const [, hwPin, capabilities, mode, label] = resp.jdunpack(\n            GPIOCmdPack.PinInfoReport\n        )\n\n        setInfo({ hwPin, capabilities, mode, label })\n    }, [service, changeId])\n\n    useEffect(\n        () =>\n            service?.subscribe(COMMAND_RECEIVE, (pkt: Packet) => {\n                const cmd = pkt.serviceCommand\n                if (cmd === GPIOCmd.Configure) {\n                    setChangeId(id => id + 1)\n                }\n            }),\n        [service]\n    )\n\n    return (\n        <TableRow>\n            <TableCell title={`pin ${label || pin + \"\"}, hardware id ${hwPin}`}>\n                {label || pin + \"\"} {`(#${hwPin})`}\n            </TableCell>\n            <TableCell>{state !== undefined ? state : \"\"}</TableCell>\n            <TableCell>\n                {mode !== undefined\n                    ? prettyEnum(modeSpec, mode).toLowerCase()\n                    : \"\"}\n            </TableCell>\n            <TableCell>\n                {capabilities !== undefined\n                    ? prettyEnum(capSpec, capabilities).toLowerCase()\n                    : \"\"}\n            </TableCell>\n        </TableRow>\n    )\n}\n\nexport default function DashboardGPIO(props: DashboardServiceProps) {\n    const { service, visible } = props\n\n    const stateRegister = useRegister(service, GPIOReg.State)\n    const [state] = useRegisterUnpackedValue<[Uint8Array]>(stateRegister, props)\n\n    if (state === undefined)\n        return <DashboardRegisterValueFallback register={stateRegister} />\n\n    return (\n        <Table size=\"small\">\n            {Array(state.length)\n                .fill(0)\n                .map((v, i) => (\n                    <PinItem\n                        service={service}\n                        pin={i}\n                        key={i}\n                        state={state[i]}\n                        visible={visible}\n                    />\n                ))}\n        </Table>\n    )\n}\n"],"names":["useState","label","info","spec","useServiceSpecificationFromServiceClass","modeSpec","capSpec","useEffectAsync","pkt","Packet","GPIOCmd","jdpack","GPIOCmdPack","resp","service","setInfo","useEffect","cmd","setChangeId","id","pin","state","mode","prettyEnum","capabilities","stateRegister","useRegister","GPIOReg","useRegisterUnpackedValue","Array"],"sourceRoot":""}