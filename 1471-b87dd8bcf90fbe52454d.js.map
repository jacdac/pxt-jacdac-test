{"version":3,"file":"1471-b87dd8bcf90fbe52454d.js","mappings":"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","sources":["webpack://jacdac-docs/./src/jacdac/useServiceClient.ts","webpack://jacdac-docs/./jacdac-ts/src/clients/cloudconfigurationclient.ts","webpack://jacdac-docs/./src/components/dashboard/DashboardCloudConfiguration.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { JDService } from \"../../jacdac-ts/src/jdom/service\"\nimport { JDServiceClient } from \"../../jacdac-ts/src/jdom/serviceclient\"\n\nexport default function useServiceClient<T extends JDServiceClient>(\n    service: JDService,\n    factory: (service: JDService) => T,\n    deps: React.DependencyList = []\n) {\n    const [client, setClient] = useState<T>(undefined)\n\n    useEffect(() => {\n        const c = service && factory(service)\n        setClient(c)\n        return () => c?.unmount()\n    }, [service, ...deps]) // don't use factory in cache!\n\n    return client\n}\n","import {\n    CloudConfigurationCmd,\n    CloudConfigurationConnectionStatus,\n    CloudConfigurationEvent,\n    CloudConfigurationReg,\n    CHANGE,\n    EVENT,\n    REPORT_UPDATE,\n    SRV_CLOUD_CONFIGURATION,\n} from \"../jdom/constants\"\nimport { jdpack } from \"../jdom/pack\"\nimport { JDRegister } from \"../jdom/register\"\nimport { JDService } from \"../jdom/service\"\nimport { JDServiceClient } from \"../jdom/serviceclient\"\nimport { assert } from \"../jdom/utils\"\n\n/**\n * A generic client for cloud configuration servers.\n */\nexport class CloudConfigurationClient extends JDServiceClient {\n    private readonly serverNameRegister: JDRegister\n    private readonly cloudDeviceIdRegister: JDRegister\n    private readonly cloudTypeRegister: JDRegister\n    private readonly connectionStatusRegister: JDRegister\n\n    constructor(service: JDService) {\n        super(service)\n        assert(service.serviceClass === SRV_CLOUD_CONFIGURATION)\n\n        // tell the bus to refresh these register\n        this.serverNameRegister = this.service.register(\n            CloudConfigurationReg.ServerName,\n        )\n        this.cloudDeviceIdRegister = this.service.register(\n            CloudConfigurationReg.CloudDeviceId,\n        )\n        this.cloudTypeRegister = this.service.register(\n            CloudConfigurationReg.CloudType,\n        )\n        this.connectionStatusRegister = this.service.register(\n            CloudConfigurationReg.ConnectionStatus,\n        )\n        this.mount(() =>\n            this.serverNameRegister.subscribe(REPORT_UPDATE, () =>\n                this.emit(CHANGE),\n            ),\n        )\n        this.mount(() =>\n            this.connectionStatusRegister.subscribe(REPORT_UPDATE, () => {\n                this.emit(CHANGE)\n            }),\n        )\n        this.mount(() =>\n            this.service\n                .event(CloudConfigurationEvent.ConnectionStatusChange)\n                .on(EVENT, () => {\n                    this.connectionStatusRegister.scheduleRefresh()\n                }),\n        )\n    }\n\n    get serverName() {\n        return this.serverNameRegister.stringValue\n    }\n\n    get cloudDeviceId() {\n        return this.cloudDeviceIdRegister.stringValue\n    }\n\n    get cloudType() {\n        return this.cloudTypeRegister.stringValue\n    }\n\n    get connectionStatus(): CloudConfigurationConnectionStatus {\n        const reg = this.connectionStatusRegister\n        const status = reg\n            .unpackedValue?.[0] as CloudConfigurationConnectionStatus\n        if (status === undefined) reg.scheduleRefresh()\n        return status\n    }\n\n    /**\n     * Sends a connect command to the hub\n     */\n    async connect() {\n        await this.service.sendCmdAsync(\n            CloudConfigurationCmd.Connect,\n            undefined,\n            true,\n        )\n    }\n\n    /**\n     * Sends a disconnect command to the hub\n     */\n    async disconnect() {\n        await this.service.sendCmdAsync(\n            CloudConfigurationCmd.Disconnect,\n            undefined,\n            true,\n        )\n    }\n\n    /**\n     * Sends a new connection string to the iot debice\n     * @param connectionString\n     */\n    async setConnectionString(connectionString: string) {\n        const data = jdpack<[string]>(\"s\", [connectionString || \"\"])\n        await this.service.sendCmdAsync(\n            CloudConfigurationCmd.SetConnectionString,\n            data,\n            true,\n        )\n    }\n}\n","import React, {\n    ChangeEvent,\n    useCallback,\n    useContext,\n    useEffect,\n    useState,\n} from \"react\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport {\n    Chip,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    TextField,\n    Typography,\n} from \"@mui/material\"\nimport useServiceClient from \"../../jacdac/useServiceClient\"\nimport { CloudConfigurationClient } from \"../../../jacdac-ts/src/clients/cloudconfigurationclient\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport {\n    CloudConfigurationCmd,\n    CloudConfigurationConnectionStatus,\n    CloudConfigurationEvent,\n    CloudConfigurationReg,\n} from \"../../../jacdac-ts/jacdac-spec/dist/specconstants\"\nimport { useId } from \"react\"\nimport SettingsIcon from \"@mui/icons-material/Settings\"\nimport IconButtonWithTooltip from \"../ui/IconButtonWithTooltip\"\nimport CmdButton from \"../CmdButton\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport ChipList from \"../ui/ChipList\"\nimport useEvent from \"../hooks/useEvent\"\nimport useEventCount from \"../../jacdac/useEventCount\"\nimport DialogTitleWithClose from \"../ui/DialogTitleWithClose\"\nimport useChange from \"../../jacdac/useChange\"\nimport useEffectAsync from \"../useEffectAsync\"\nimport useRegister from \"../hooks/useRegister\"\n\nfunction ConnectionStringDialog(props: {\n    open: boolean\n    setOpen: (v: boolean) => void\n    client: CloudConfigurationClient\n}) {\n    const { client, open, setOpen } = props\n    const [value, setValue] = useState(\"\")\n    const connectionStringId = useId()\n    const handleCancel = () => {\n        setValue(\"\")\n        setOpen(false)\n    }\n    const handleValueChange = (event: ChangeEvent<HTMLInputElement>) => {\n        setValue(event.target.value)\n    }\n    const handleOk = async mounted => {\n        await client.setConnectionString(value || \"\")\n        if (!mounted()) return\n        setValue(\"\")\n        setOpen(false)\n    }\n    return (\n        <Dialog open={open} fullWidth={true} maxWidth={\"md\"}>\n            <DialogTitleWithClose onClose={handleCancel}>\n                Enter device connection string\n            </DialogTitleWithClose>\n            <DialogContent>\n                <Typography component=\"p\" variant=\"caption\">\n                    Open your IoT Hub in the Azure portal, select IoT Devices,\n                    select or create a device, copy the primary or secondary\n                    connection string.\n                </Typography>\n                <TextField\n                    sx={{ mt: 2 }}\n                    id={connectionStringId}\n                    value={value}\n                    label=\"Value\"\n                    fullWidth={true}\n                    type=\"password\"\n                    size=\"small\"\n                    placeholder=\"Connection string\"\n                    onChange={handleValueChange}\n                />\n            </DialogContent>\n            <DialogActions>\n                <CmdButton\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={!client}\n                    onClick={handleOk}\n                >\n                    Save\n                </CmdButton>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default function DashboardCloudConfiguration(\n    props: DashboardServiceProps\n) {\n    const { service } = props\n    const [open, setOpen] = useState(false)\n\n    const serverNameRegister = useRegister(\n        service,\n        CloudConfigurationReg.ServerName\n    )\n    const cloudDeviceIdRegister = useRegister(\n        service,\n        CloudConfigurationReg.CloudDeviceId\n    )\n    const cloudTypeRegister = useRegister(\n        service,\n        CloudConfigurationReg.CloudType\n    )\n    const [serverName] = useRegisterUnpackedValue<[string]>(\n        serverNameRegister,\n        props\n    )\n    const [cloudDeviceId] = useRegisterUnpackedValue<[string]>(\n        cloudDeviceIdRegister,\n        props\n    )\n    const [cloudType] = useRegisterUnpackedValue<[string]>(\n        cloudTypeRegister,\n        props\n    )\n    const connectionStatusRegister = service.register(\n        CloudConfigurationReg.ConnectionStatus\n    )\n    const [connectionStatus] = useRegisterUnpackedValue<\n        [CloudConfigurationConnectionStatus]\n    >(connectionStatusRegister, props)\n    const messageSentEvent = useEvent(\n        service,\n        CloudConfigurationEvent.MessageSent\n    )\n    const messageSent = useEventCount(messageSentEvent)\n    const factory = useCallback(srv => new CloudConfigurationClient(srv), [])\n    const client = useServiceClient(service, factory)\n    const color = \"primary\"\n    const connected =\n        connectionStatus === CloudConfigurationConnectionStatus.Connected\n\n    const handleConnect = async () => {\n        const cmd = connected\n            ? CloudConfigurationCmd.Disconnect\n            : CloudConfigurationCmd.Connect\n        await service.sendCmdAsync(cmd)\n    }\n    const handleConfigure = () => setOpen(true)\n    return (\n        <>\n            {cloudType && (\n                <Typography component=\"span\" variant=\"subtitle2\">\n                    {cloudType}\n                </Typography>\n            )}\n            <ChipList>\n                {serverName && (\n                    <Chip\n                        color={connected ? \"primary\" : \"default\"}\n                        label={serverName}\n                        onClick={handleConnect}\n                        disabled={connectionStatus === undefined}\n                        title={\n                            CloudConfigurationConnectionStatus[\n                                connectionStatus\n                            ] || \"Waiting...\"\n                        }\n                    />\n                )}\n                {cloudDeviceId && <Chip label={`device: ${cloudDeviceId}`} />}\n                {messageSent !== undefined && (\n                    <Chip label={`messages: ${messageSent}`} />\n                )}\n                <IconButtonWithTooltip\n                    title=\"Configure\"\n                    onClick={handleConfigure}\n                >\n                    <SettingsIcon />\n                </IconButtonWithTooltip>\n            </ChipList>\n            {client && (\n                <ConnectionStringDialog\n                    client={client}\n                    open={open}\n                    setOpen={setOpen}\n                />\n            )}\n        </>\n    )\n}\n"],"names":["deps","useState","useEffect","c","service","factory","setClient","CloudConfigurationClient","assert","CloudConfigurationReg","CloudConfigurationEvent","reg","status","CloudConfigurationCmd","data","jdpack","connectionString","connectionStringId","useId","handleCancel","setValue","setOpen","handleValueChange","event","handleOk","client","value","mounted","mt","serverNameRegister","useRegister","cloudDeviceIdRegister","cloudTypeRegister","useRegisterUnpackedValue","connectionStatusRegister","messageSentEvent","useEvent","messageSent","useEventCount","useCallback","srv","useServiceClient","color","connected","connectionStatus","CloudConfigurationConnectionStatus","handleConnect","cmd","handleConfigure","cloudType","serverName","cloudDeviceId"],"sourceRoot":""}