{"version":3,"file":"2209-139297f675619420f49a.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardVibrationMotor.tsx"],"sourcesContent":["import { Grid, TextField } from \"@mui/material\"\nimport React, {\n    ChangeEvent,\n    useContext,\n    useEffect,\n    useMemo,\n    useState,\n} from \"react\"\nimport {\n    VibrationMotorCmd,\n    VibrationMotorReg,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { jdpack } from \"../../../jacdac-ts/src/jdom/pack\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport WebAudioContext from \"../ui/WebAudioContext\"\nimport { VibrationMotorServer } from \"../../../jacdac-ts/src/servers/vibrationmotorserver\"\nimport { JDService } from \"../../../jacdac-ts/src/jdom/service\"\nimport CmdButton from \"../CmdButton\"\nimport SliderWithLabel from \"../ui/SliderWithLabel\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport useRegister from \"../hooks/useRegister\"\nimport Alert from \"../ui/Alert\"\nimport { tL as tL } from \"../translations\"\n\nconst T_DIT = 50\nconst T_REST = 120\n\nconst patterns: Record<\n    string,\n    {\n        name: string\n        duration: number\n        volume: number\n    }\n> = {\n    \".\": {\n        name: \"dit\",\n        duration: 1,\n        volume: 0.6,\n    },\n    \"-\": {\n        name: \"dat\",\n        duration: 3,\n        volume: 0.6,\n    },\n    \" \": {\n        name: \"space\",\n        duration: 1,\n        volume: 0,\n    },\n    _: {\n        name: \"low dat\",\n        duration: 3,\n        volume: 0.2,\n    },\n    \"=\": {\n        name: \"hight dat\",\n        duration: 3,\n        volume: 1,\n    },\n    \"'\": {\n        name: \"high dit\",\n        duration: 1,\n        volume: 1,\n    },\n    \",\": {\n        name: \"low dit\",\n        duration: 1,\n        volume: 0.2,\n    },\n}\n\nfunction PatternInput(props: {\n    disabled?: boolean\n    service: JDService\n    speedScale: number\n    maxLength: number\n}) {\n    const { speedScale, disabled, service, maxLength } = props\n    const { onClickActivateAudioContext } = useContext(WebAudioContext)\n    const [text, setText] = useState(\".-.\")\n    const errorText =\n        text.length > maxLength\n            ? tL(\"patternTooLong\") + `(` + tL(`maximum`) + ` ${maxLength})`\n            : undefined\n    const helperText = useMemo(\n        () =>\n            tL(`patternVibrations`) + `: ${Object.entries(patterns)\n                .map(([key, value]) => `\"${key}\" ${value.name}`)\n                .join(\", \")}`,\n        []\n    )\n    const handleSend = async () => {\n        onClickActivateAudioContext() // enable audio context within click handler\n        const seq = text\n            .split(\"\")\n            .map(c => patterns[c])\n            .filter(p => !!p)\n        if (navigator.vibrate)\n            navigator.vibrate(seq.flatMap(p => [p.duration, T_DIT >> 3]))\n\n        const pattern: [number, number][] = seq.flatMap(p => [\n            [(p.duration * T_DIT) >> 3, p.volume * speedScale],\n            [T_REST >> 3, 0],\n        ])\n        const data = jdpack<[[number, number][]]>(\"r: u8 u0.8\", [pattern])\n        await service.sendCmdAsync(VibrationMotorCmd.Vibrate, data)\n    }\n    const handleChange = (ev: ChangeEvent<HTMLInputElement>) => {\n        const newValue = ev.target.value\n        setText(\n            newValue\n                .split(\"\")\n                .filter(s => !!patterns[s])\n                .join(\"\")\n        )\n    }\n    return (\n        <Grid container spacing={1} direction=\"row\">\n            <Grid item xs>\n                <TextField\n                    title={tL(\"vibrationPattern\")}\n                    helperText={errorText || helperText}\n                    value={text}\n                    fullWidth={true}\n                    error={!!errorText}\n                    size=\"small\"\n                    onChange={handleChange}\n                />\n            </Grid>\n            <Grid item>\n                <CmdButton\n                    variant=\"outlined\"\n                    title={tL(\"sendVibPattern\")}\n                    disabled={disabled}\n                    onClick={handleSend}\n                >\n                    {tL(\"vibrate\")}\n                </CmdButton>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default function DashboardVibrationMotor(props: DashboardServiceProps) {\n    const { service } = props\n    const server = useServiceServer<VibrationMotorServer>(service)\n    const { playTone, activated } = useContext(WebAudioContext)\n    const [intensity, setIntensity] = useState(20)\n    const maxVibrationsRegister = useRegister(\n        service,\n        VibrationMotorReg.MaxVibrations\n    )\n    const [maxVibrations = 3] = useRegisterUnpackedValue(maxVibrationsRegister)\n\n    // listen for playTone commands from the buzzer\n    useEffect(\n        () =>\n            server?.subscribe<{\n                duration: number\n                speed: number\n            }>(VibrationMotorServer.VIBRATE_PATTERN, ({ duration, speed }) => {\n                const ms = duration << 3\n                playTone(440, ms, speed)\n            }),\n        [server]\n    )\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const handleIntensity: any = (\n        event: React.ChangeEvent<unknown>,\n        value: number | number[]\n    ) => setIntensity(value as number)\n    const percentValueFormat = (newValue: number) => `${newValue | 0}%`\n    // 50, 180\n    return (\n        <>\n            <Grid item xs={12}>\n                <PatternInput\n                    service={service}\n                    speedScale={intensity / 100}\n                    maxLength={maxVibrations}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <SliderWithLabel\n                    label={tL(\"intensity\")}\n                    min={0}\n                    max={100}\n                    value={intensity}\n                    onChange={handleIntensity}\n                    valueLabelDisplay=\"auto\"\n                    valueLabelFormat={percentValueFormat}\n                />\n            </Grid>\n            {!activated && <Alert severity=\"warning\">{tL(\"pressVibrate\")}</Alert>}\n        </>\n    )\n}\n"],"names":["T_DIT","T_REST","patterns","name","duration","volume","_","useContext","useState","errorText","text","tL","helperText","useMemo","Object","value","handleSend","onClickActivateAudioContext","seq","c","p","navigator","pattern","data","jdpack","service","VibrationMotorCmd","handleChange","ev","newValue","setText","s","server","useServiceServer","maxVibrationsRegister","useRegister","VibrationMotorReg","maxVibrations","useRegisterUnpackedValue","useEffect","VibrationMotorServer","ms","playTone","handleIntensity","setIntensity","percentValueFormat","intensity"],"sourceRoot":""}