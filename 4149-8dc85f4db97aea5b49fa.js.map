{"version":3,"file":"4149-8dc85f4db97aea5b49fa.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMe,6BAA8B,CACzC,GAAM,iCAAsCA,mCAA5C,GACA,GAAMC,CAAAA,YAAY,CAAG,IAAMC,gBAAgB,CAAC,CAA5C,aAA2C,CAA3C,CACA,MACI,CAAC,CAAD,4BACI,0CAAO,QAAQ,CAAf,qBACI,mDADJ,eACI,CADJ,oFAII,6DAAQ,OAAO,CAAf,WAA2B,OAAO,CAAlC,cANZ,UAMY,CAJJ,CAFR,CAYH;;;;;;;;ACND,gCAGG,CACC,GAAM,oBAAN,MACA,GAAM,gBAAoBF,mCAA1B,GACA,GAAM,CAAEG,IAAI,CAAN,eAAN,UACA,GAAMC,CAAAA,OAAO,CAAGC,0CAAuB,CAAC,CACpCC,SAAS,CAD2B,cAEpCC,mBAAmB,CAFiB,cAGpCC,iBAAiB,CAHrB,aAAwC,CAAD,CAAvC,CAKA,GAAI,EAACJ,OAAD,OAACA,EAAAA,OAAD,SAACA,EAAAA,OAAO,CAAR,SAAoB,CAACK,0CAAzB,CAA4C,YAC5C,mBACI,0CAAM,IAAI,CAAV,KAAW,EAAE,CAAb,iBACI,0CAAM,SAAS,CAAf,KAAgB,OAAO,CAAvB,EAA4B,YAAY,CAAxC,yBACI,0CAAM,IAAI,CAAV,KAAW,SAAS,CAApB,uBACI,kDACI,GAAG,CAAEH,SAAS,CADlB,KAEI,SAAS,CAFb,UAGI,OAAO,CAHX,QAII,IAAI,CAJR,KAKI,WAAW,CAPvB,IAEQ,EADJ,CADJ,cAUI,0CAAM,IAAI,CAAV,KAAW,EAAE,CAAb,mBACI,0CAAM,SAAS,CAAf,KAAgB,OAAO,CAAvB,GACKF,OAAO,CAAPA,GAAAA,CAAYM,MAAM,eACf,0CAAM,IAAI,CAAV,KAAW,GAAG,CAAEA,MAAM,CAAtB,iBACI,0DACI,KAAK,CAAEA,MAAM,CADjB,KAEI,EAAE,aAAcC,uCAAmB,CAC/BD,MAAM,CADR,EAAiC,CAAjC,CAFN,IAKI,OAAO,CALX,sBAOI,+DACI,aAAa,CADjB,OAEI,MAAM,CAzB1C,IAuBgC,EAPJ,CADJ,CADHN,CADL,CADJ,CAVJ,CADJ,CADJ,CAqCJ,CAAe,sCAGZ,CACC,GAAM,MAAUQ,oBAAU,CAA1B,sBAA0B,CAA1B,CACA,GAAM,aAAN,IACA,GAAM,eAAN,MACA,GAAMC,CAAAA,QAAQ,CAAGC,eAAjB,GACA,GAAMC,CAAAA,OAAO,CAAGF,QAAQ,CAAxB,SACA,mBACI,2CACI,EAAE,CADN,SAEI,kBAFJ,QAGI,IAAI,CAHR,KAII,OAAO,CAJX,QAKI,SAAS,CALb,mBAOI,yDAAsB,OAAO,CAA7B,QAAwC,EAAE,CAA1C,SAPJ,qBAOI,CAPJ,cAUI,mEACI,uCADJ,IACI,CADJ,cAEI,0CAAM,SAAS,CAAf,KAAgB,OAAO,CAAvB,GACKG,UAAU,CAAVA,GAAAA,CAAeV,SAAS,eACrB,sCACI,GAAG,CAAEA,SAAS,CADlB,KAEI,SAAS,CAFb,UAGI,OAAO,CAlB/B,OAeoB,EADHU,CADL,CAFJ,CAVJ,CADJ,CAyBH","sources":["webpack://jacdac-docs/./src/components/alert/DeveloperModeAlert.tsx","webpack://jacdac-docs/./src/components/dialogs/ConnectTransportDialog.tsx"],"sourcesContent":["import React from \"react\"\nimport { AlertTitle } from \"@mui/material\"\nimport useDeveloperMode from \"../hooks/useDeveloperMode\"\nimport Alert from \"../ui/Alert\"\nimport { Button } from \"gatsby-theme-material-ui\"\n\nexport default function DeveloperModeAlert() {\n    const { developerMode, setDeveloperMode } = useDeveloperMode()\n    const handleToggle = () => setDeveloperMode(!developerMode)\n    return (\n        !!developerMode && (\n            <Alert severity=\"info\">\n                <AlertTitle>DeveloperMode</AlertTitle>\n                Allows to connect to device that are not registered in the\n                catalog.\n                <Button variant=\"outlined\" onClick={handleToggle}>\n                    Turn Off\n                </Button>\n            </Alert>\n        )\n    )\n}\n","import { Dialog, DialogContent, Grid } from \"@mui/material\"\nimport React, { useContext } from \"react\"\nimport { useId } from \"react\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport ConnectButton from \"../buttons/ConnectButton\"\nimport useDeviceSpecifications from \"../devices/useDeviceSpecifications\"\nimport { Transport } from \"../../../jacdac-ts/src/jdom/transport/transport\"\nimport DialogTitleWithClose from \"../ui/DialogTitleWithClose\"\nimport { Flags } from \"../../../jacdac-ts/src/jdom/flags\"\nimport DeveloperModeAlert from \"../alert/DeveloperModeAlert\"\nimport { DeviceSpecificationIcon } from \"../devices/DeviceIcon\"\nimport IconButtonWithTooltip from \"../ui/IconButtonWithTooltip\"\nimport useDeveloperMode from \"../hooks/useDeveloperMode\"\nimport { identifierToUrlPath } from \"../../../jacdac-ts/src/jdom/catalog\"\n\nfunction ConnectTransport(props: {\n    transport: Transport\n    onClose: () => void\n}) {\n    const { transport, onClose } = props\n    const { developerMode } = useDeveloperMode()\n    const { type: transportType } = transport\n    const devices = useDeviceSpecifications({\n        transport: transportType,\n        includeExperimental: developerMode,\n        includeDeprecated: developerMode,\n    })\n    if (!devices?.length && !Flags.diagnostics) return null\n    return (\n        <Grid item xs={12}>\n            <Grid container spacing={1} alignContent=\"flex-end\">\n                <Grid item alignSelf=\"center\">\n                    <ConnectButton\n                        key={transport.type}\n                        transport={transport}\n                        onClick={onClose}\n                        full={true}\n                        typeInTitle={true}\n                    />\n                </Grid>\n                <Grid item xs>\n                    <Grid container spacing={1}>\n                        {devices.map(device => (\n                            <Grid item key={device.id}>\n                                <IconButtonWithTooltip\n                                    title={device.name}\n                                    to={`/devices/${identifierToUrlPath(\n                                        device.id\n                                    )}/`}\n                                    onClick={onClose}\n                                >\n                                    <DeviceSpecificationIcon\n                                        specification={device}\n                                        avatar={true}\n                                    />\n                                </IconButtonWithTooltip>\n                            </Grid>\n                        ))}\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default function ConnectTransportDialog(props: {\n    open: boolean\n    onClose: () => void\n}) {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const { transports } = bus\n    const { open, onClose } = props\n    const dialogId = useId()\n    const labelId = dialogId + \"-label\"\n    return (\n        <Dialog\n            id={dialogId}\n            aria-labelledby={labelId}\n            open={open}\n            onClose={onClose}\n            fullWidth={true}\n        >\n            <DialogTitleWithClose onClose={onClose} id={labelId}>\n                Connect to a device\n            </DialogTitleWithClose>\n            <DialogContent>\n                <DeveloperModeAlert />\n                <Grid container spacing={2}>\n                    {transports.map(transport => (\n                        <ConnectTransport\n                            key={transport.type}\n                            transport={transport}\n                            onClose={onClose}\n                        />\n                    ))}\n                </Grid>\n            </DialogContent>\n        </Dialog>\n    )\n}\n"],"names":["useDeveloperMode","handleToggle","setDeveloperMode","type","devices","useDeviceSpecifications","transport","includeExperimental","includeDeprecated","Flags","device","identifierToUrlPath","useContext","dialogId","useId","labelId","transports"],"sourceRoot":""}