{"version":3,"file":"4490-d20eee93dca0fa9aeccc.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/workers/cad.proxy.ts","webpack://jacdac-docs/./src/components/enclosure/EnclosureGenerator.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/ban-types */\nimport workerProxy from \"./proxy\"\nimport type {\n    CadConvertRequest,\n    CadConvertResponse,\n} from \"../../workers/cad/dist/node_modules/cad.worker\"\nimport type {\n    EnclosureModel,\n    EnclosureOptions,\n    EnclosureFile,\n} from \"../../workers/cad/dist/node_modules/enclosurecad\"\n\nexport async function convertToSTL(\n    model: EnclosureModel,\n    options?: EnclosureOptions\n): Promise<{ stls?: EnclosureFile[]; error?: string }> {\n    const worker = workerProxy(\"cad\")\n    const res = await worker.postMessage<CadConvertRequest, CadConvertResponse>(\n        {\n            worker: \"cad\",\n            type: \"convert\",\n            model,\n            options,\n        }\n    )\n    return { stls: res?.stls, error: res?.error }\n}","import React, { lazy, useEffect, useState } from \"react\"\n\nimport { Button, Grid } from \"@mui/material\"\nimport Suspense from \"../ui/Suspense\"\nimport { convertToSTL } from \"../workers/cad.proxy\"\nimport type {\n    EnclosureModel,\n    EnclosureOptions,\n} from \"../../workers/cad/dist/node_modules/enclosurecad\"\nimport useGridBreakpoints from \"../useGridBreakpoints\"\nimport { CircularProgress } from \"@mui/material\"\nimport { Alert } from \"@mui/material\"\n\nconst STLModelCard = lazy(() => import(\"../models/STLModelCard\"))\nconst EC30Card = lazy(() => import(\"../ec30/EC30Card\"))\n\nexport default function EnclosureGenerator(props: {\n    model: EnclosureModel\n    options?: EnclosureOptions\n    color?: string\n    hideAfterGenerated?: boolean\n    showSave?: boolean\n}) {\n    const {\n        color = \"#888\",\n        model,\n        options,\n        hideAfterGenerated,\n        showSave,\n    } = props\n    const [working, setWorking] = useState(false)\n    const [files, setFiles] = useState<{ name: string; url: string }[]>()\n    const gridBreakpoints = useGridBreakpoints(files?.length)\n    const [stlError, setStlError] = useState(\"\")\n    const [hideGenerate, setHideGenerate] = useState(false)\n\n    const updateUrl = async () => {\n        try {\n            setStlError(undefined)\n            setWorking(true)\n            const { stls: files, error } = await convertToSTL(model, options)\n            const newFiles = files?.map(({ name, blob }) => ({\n                name,\n                url: URL.createObjectURL(blob),\n            }))\n            setFiles(newFiles)\n            setStlError(error)\n            if (hideAfterGenerated) setHideGenerate(true)\n        } finally {\n            setWorking(false)\n        }\n    }\n    useEffect(\n        () => () => files?.forEach(({ url }) => URL.revokeObjectURL(url)),\n        [files]\n    )\n\n    const handleClick = async () => {\n        await updateUrl()\n        await updateUrl()\n    }\n    return (\n        <Grid container spacing={1}>\n            {!hideGenerate && (\n                <Grid item xs={12}>\n                    <Button\n                        onClick={handleClick}\n                        variant=\"outlined\"\n                        disabled={working}\n                        startIcon={\n                            working && (\n                                <CircularProgress\n                                    size=\"1rem\"\n                                    title=\"generating STL files\"\n                                    variant=\"indeterminate\"\n                                />\n                            )\n                        }\n                    >\n                        Generate Enclosure\n                    </Button>\n                </Grid>\n            )}\n            {stlError && (\n                <Grid item xs={12}>\n                    <Alert severity=\"error\">{stlError}</Alert>\n                </Grid>\n            )}\n            {model && (\n                <Grid item>\n                    <Suspense>\n                        <EC30Card model={model} showSave={showSave} />\n                    </Suspense>\n                </Grid>\n            )}\n            {files?.map(file => (\n                <Grid item key={file.name} {...gridBreakpoints}>\n                    <Suspense>\n                        <STLModelCard\n                            {...file}\n                            autoRotate={true}\n                            color={color}\n                        />\n                    </Suspense>\n                </Grid>\n            ))}\n        </Grid>\n    )\n}\n"],"names":["worker","workerProxy","res","type","stls","error","STLModelCard","lazy","EC30Card","color","useState","gridBreakpoints","useGridBreakpoints","files","updateUrl","setStlError","setWorking","convertToSTL","newFiles","url","URL","setFiles","setHideGenerate","useEffect","handleClick","working","stlError","model","file"],"sourceRoot":""}