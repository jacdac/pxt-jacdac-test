{"version":3,"file":"579-2cdeb8f58c6119e817e9.js","mappings":";;;;;;;AAAa;;AAEb,6BAA6B,mBAAO,CAAC,KAA8C;AACnF,6BAA6C;AAC7C;AACA,CAAC,CAAC;AACF,SAAe;AACf,4CAA4C,mBAAO,CAAC,KAAuB;AAC3E,kBAAkB,mBAAO,CAAC,KAAmB;AAC7C;AACA;AACA,CAAC;AACD;AACA,CAAC;AACD,SAAe;;;;;;;;;;;;;;;;;;;;ACDA,wCAAgE,CAC3E,GAAM,UAAN,MACA,GAAMA,CAAAA,OAAO,CAAGC,uEAAW,SAAUC,wGAAV,CAA3B,CACA,GAAM,mBAAkBC,+CAAQ,CAAhC,QAAgC,CAAhC,CACA,GAAMC,CAAAA,MAAM,CAAGC,4CAAf,GAEA,GAAMC,CAAAA,YAAY,CAAGC,EAAE,EAAI,CACvB,GAAMC,CAAAA,QAAQ,CAAGD,EAAE,CAAFA,MAAAA,CAAjB,MACAE,OAAO,CAAPA,QAAO,CAAPA,CAFJ,EAKA,GAAMC,CAAAA,WAAW,mIAAG,WAAY,CAC5BC,OAAO,CAAPA,GAAAA,CAAAA,SAAAA,IAAAA,EACA,GAAI,CAACX,OAAO,CAAZ,UACI,KAAMA,CAAAA,OAAO,CAAPA,YAAAA,CAAqBY,0EAAM,MAAkB,CAA7CZ,IAA6C,CAAlB,CAA3BA,CAAN,IAAMA,CAAN,CACJ,KAAMa,CAAAA,OAAO,CAAPA,YAAAA,CACFC,oGADED,CAEFD,0EAAM,KAAgB,CAF1B,IAE0B,CAAhB,CAFJC,CAAN,CAJa,SAAXH,SAAAA,CAAAA,WAAAA,EAAW,qCAAjB,CAAiB,EAAjB,CAUA,mBACI,+GACI,kHAAM,IAAI,CAAV,KAAW,EAAE,CAAb,iBACI,iHACI,EAAE,CADN,OAEI,UAAU,CAFd,MAGI,KAAK,CAHT,KAII,KAAK,CAJT,mBAKI,UAAU,CALd,0BAMI,QAAQ,CANZ,aAOI,IAAI,CARZ,MACI,EADJ,cAUI,8GACI,QAAQ,CAAE,CADd,KAEI,KAAK,CAFT,aAGI,OAAO,CAHX,YAII,IAAI,cAAE,gIAhBtB,IAgBsB,CAJV,EAVJ,CADJ,CADJ,CAqBH","sources":["webpack://jacdac-docs/./node_modules/@mui/icons-material/VoiceChat.js","webpack://jacdac-docs/./src/components/dashboard/DashboardSpeechSynthesis.tsx"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)([/*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M20 2H4c-1.1 0-2 .9-2 2v18l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm0 14H6l-2 2V4h16v12z\"\n}, \"0\"), /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M11.25 5h1.5v10h-1.5zM8.5 7H10v6H8.5zM6 9h1.5v2H6zm8-2h1.5v6H14zm2.5 2H18v2h-1.5z\"\n}, \"1\")], 'VoiceChat');\nexports.default = _default;","import React, { useState } from \"react\"\nimport {\n    SpeechSynthesisCmd,\n    SpeechSynthesisReg,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { Grid, TextField } from \"@mui/material\"\nimport VoiceChatIcon from \"@mui/icons-material/VoiceChat\"\nimport CmdButton from \"../CmdButton\"\nimport { jdpack } from \"../../../jacdac-ts/src/jdom/pack\"\nimport { useId } from \"react\"\nimport useRegister from \"../hooks/useRegister\"\n\nexport default function DashboardSpeechSynthesis(props: DashboardServiceProps) {\n    const { service } = props\n    const enabled = useRegister(service, SpeechSynthesisReg.Enabled)\n    const [text, setText] = useState(\"jacdac\")\n    const textId = useId()\n\n    const handleChange = ev => {\n        const newValue = ev.target.value\n        setText(newValue)\n    }\n\n    const handleSpeak = async () => {\n        console.log(`speak ${text}`)\n        if (!enabled.boolValue)\n            await enabled.sendSetAsync(jdpack<[boolean]>(\"u8\", [true]), true)\n        await service.sendCmdAsync(\n            SpeechSynthesisCmd.Speak,\n            jdpack<[string]>(\"s\", [text])\n        )\n    }\n\n    return (\n        <>\n            <Grid item xs={12}>\n                <TextField\n                    id={textId}\n                    spellCheck={false}\n                    value={text}\n                    label={\"speech synthesis\"}\n                    helperText={\"Enter text to speak out\"}\n                    onChange={handleChange}\n                    type={\"text\"}\n                />\n                <CmdButton\n                    disabled={!text}\n                    title=\"speak text\"\n                    onClick={handleSpeak}\n                    icon={<VoiceChatIcon />}\n                />\n            </Grid>\n        </>\n    )\n}\n"],"names":["enabled","useRegister","SpeechSynthesisReg","useState","textId","useId","handleChange","ev","newValue","setText","handleSpeak","console","jdpack","service","SpeechSynthesisCmd"],"sourceRoot":""}