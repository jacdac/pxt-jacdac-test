{"version":3,"file":"5959-3c0ea41c44168b4917e0.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardCharacterScreen.tsx","webpack://jacdac-docs/./src/components/widgets/CharacterScreenWidget.tsx"],"sourcesContent":["import React, { ChangeEvent, useEffect, useState } from \"react\"\nimport {\n    CharacterScreenReg,\n    CharacterScreenTextDirection,\n    CharacterScreenVariant,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport { Grid, TextField } from \"@mui/material\"\nimport useRegister from \"../hooks/useRegister\"\nimport CmdButton from \"../CmdButton\"\nimport ClearIcon from \"@mui/icons-material/Clear\"\nimport CharacterScreenWidget from \"../widgets/CharacterScreenWidget\"\nimport DashboardRegisterValueFallback from \"./DashboardRegisterValueFallback\"\nimport { tL } from \"../translations\"\n\n// https://en.wikipedia.org/wiki/Braille_ASCII\nconst BRAILE_CHARACTERS = {\n    \" \": \"⠀\", // space bar to dot-0\n    \"-\": \"⠤\",\n    \",\": \"⠠\",\n    \";\": \"⠰\",\n    \":\": \"⠱\",\n    \"!\": \"⠮\",\n    \"?\": \"⠹\",\n    \".\": \"⠨\",\n    \"(\": \"⠷\",\n    \"[\": \"⠪\",\n    \"@\": \"⠈\",\n    \"*\": \"⠡\",\n    \"/\": \"⠌\",\n    \"'\": \"⠄\",\n    '\"': \"⠐\",\n    \"\\\\\": \"⠳\",\n    \"&\": \"⠯\",\n    \"%\": \"⠩\",\n    \"^\": \"⠘\",\n    \"+\": \"⠬\",\n    \"<\": \"⠣\",\n    \">\": \"⠜\",\n    $: \"⠫\",\n    \"0\": \"⠴\",\n    \"1\": \"⠂\",\n    \"2\": \"⠆\",\n    \"3\": \"⠒\",\n    \"4\": \"⠲\",\n    \"5\": \"⠢\",\n    \"6\": \"⠖\",\n    \"7\": \"⠶\",\n    \"8\": \"⠦\",\n    \"9\": \"⠔\",\n    A: \"⠁\",\n    B: \"⠃\",\n    C: \"⠉\",\n    D: \"⠙\",\n    E: \"⠑\",\n    F: \"⠋\",\n    G: \"⠛\",\n    H: \"⠓\",\n    I: \"⠊\",\n    J: \"⠚\",\n    K: \"⠅\",\n    L: \"⠇\",\n    M: \"⠍\",\n    N: \"⠝\",\n    O: \"⠕\",\n    P: \"⠏\",\n    Q: \"⠟\",\n    R: \"⠗\",\n    S: \"⠎\",\n    T: \"⠞\",\n    U: \"⠥\",\n    V: \"⠧\",\n    W: \"⠺\",\n    X: \"⠭\",\n    Z: \"⠵\",\n    \"]\": \"⠻\",\n    \"#\": \"⠼\",\n    Y: \"⠽\",\n    \")\": \"⠾\",\n    \"=\": \"⠿\",\n    _: \"⠸\",\n}\nfunction brailify(s: string) {\n    if (!s) return s\n    let r = \"\"\n    const su = s.toLocaleUpperCase()\n    for (let i = 0; i < su.length; ++i) {\n        r += BRAILE_CHARACTERS[su.charAt(i)] || \"?\"\n    }\n    return r\n}\n\nexport default function DashboardCharacterScreen(props: DashboardServiceProps) {\n    const { service, expanded } = props\n\n    const messageRegister = useRegister(service, CharacterScreenReg.Message)\n    const rowsRegister = useRegister(service, CharacterScreenReg.Rows)\n    const columnsRegister = useRegister(service, CharacterScreenReg.Columns)\n    const textDirectionRegister = useRegister(\n        service,\n        CharacterScreenReg.TextDirection\n    )\n    const variantRegister = useRegister(service, CharacterScreenReg.Variant)\n    const brightnessRegister = useRegister(\n        service,\n        CharacterScreenReg.Brightness\n    )\n    const [message] = useRegisterUnpackedValue<[string]>(messageRegister, props)\n    const [rows] = useRegisterUnpackedValue<[number]>(rowsRegister, props)\n    const [columns] = useRegisterUnpackedValue<[number]>(columnsRegister, props)\n    const [textDirection] = useRegisterUnpackedValue<[number]>(\n        textDirectionRegister,\n        props\n    )\n    const [variant] = useRegisterUnpackedValue<[CharacterScreenVariant]>(\n        variantRegister,\n        props\n    )\n    const [brightness] = useRegisterUnpackedValue<[number]>(\n        brightnessRegister,\n        props\n    )\n\n    const [fieldMessage, setFieldMessage] = useState(message)\n\n    const handleClear = async () => {\n        setFieldMessage(\"\")\n        await messageRegister.sendSetStringAsync(\"\", true)\n    }\n    const handleFieldMessageChange = async (\n        ev: ChangeEvent<HTMLTextAreaElement>\n    ) => {\n        setFieldMessage(ev.target.value)\n        await messageRegister.sendSetStringAsync(ev.target.value, true)\n    }\n\n    // set first value of message\n    useEffect(() => {\n        if (!fieldMessage && message) setFieldMessage(message)\n    }, [message])\n\n    if (rows === undefined || columns === undefined)\n        return (\n            <DashboardRegisterValueFallback\n                register={rows === undefined ? rowsRegister : columnsRegister}\n            />\n        ) // size unknown\n\n    const converter: (s: string) => string =\n        variant === CharacterScreenVariant.Braille ? brailify : s => s\n    const cmessage = message?.split(\"\").map(converter).join(\"\")\n    const rtl = textDirection === CharacterScreenTextDirection.RightToLeft\n\n    return (\n        <Grid container spacing={1}>\n            {expanded && (\n                <Grid item xs={12}>\n                    <Grid container spacing={1}>\n                        <Grid item xs>\n                            <TextField\n                                label={tL(\"text\")}\n                                value={fieldMessage}\n                                onChange={handleFieldMessageChange}\n                                multiline={true}\n                                rows={rows || 2}\n                                fullWidth={true}\n                            />\n                        </Grid>\n                        <Grid item>\n                            <CmdButton\n                                title={tL(\"clearDisplay\")}\n                                onClick={handleClear}\n                                icon={<ClearIcon />}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n            )}\n            <Grid item xs>\n                <CharacterScreenWidget\n                    rows={rows}\n                    columns={columns}\n                    rtl={rtl}\n                    message={cmessage}\n                    disabled={brightness === 0}\n                />\n            </Grid>\n        </Grid>\n    )\n}\n","import React from \"react\"\nimport SvgWidget from \"../widgets/SvgWidget\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\n\nexport default function CharacterScreenWidget(props: {\n    rows: number\n    columns: number\n    message: string\n    rtl?: boolean\n    disabled?: boolean\n}) {\n    const { rows, columns, message, rtl, disabled } = props\n    const { textPrimary, background, controlBackground } =\n        useWidgetTheme(\"primary\")\n    const cw = 8\n    const ch = 10\n    const m = 1\n    const mo = 2\n    const fs = 8\n\n    const w = columns * (cw + m) - m + 2 * mo\n    const h = rows * (ch + m) - m + 2 * mo\n\n    const lines = (message || \"\").split(/\\n/g)\n    const els: JSX.Element[] = []\n\n    let y = mo\n    for (let row = 0; row < rows; ++row) {\n        let x = mo\n        const line = lines[row]\n        for (let column = 0; column < columns; ++column) {\n            const char = line?.[rtl ? columns - 1 - column : column]\n            els.push(\n                <g key={`${row}-${column}`}>\n                    <rect\n                        x={x}\n                        y={y}\n                        width={cw}\n                        height={ch}\n                        fill={controlBackground}\n                    />\n                    {char && (\n                        <text\n                            x={x + cw / 2}\n                            y={y + ch - fs / 3}\n                            textAnchor=\"middle\"\n                            fontSize={fs}\n                            style={{\n                                fontFamily: \"monospace\",\n                                fontWeight: 100,\n                            }}\n                            fill={disabled ? background : textPrimary}\n                            aria-label={char}\n                        >\n                            {char}\n                        </text>\n                    )}\n                </g>\n            )\n            x += cw + m\n        }\n\n        y += ch + m\n    }\n    return (\n        <SvgWidget\n            tabIndex={0}\n            title={`character screen displaying \"${message}\"`}\n            width={w}\n            height={h}\n        >\n            <>\n                <rect\n                    x={0}\n                    y={0}\n                    width={w}\n                    height={h}\n                    r={m / 2}\n                    fill={background}\n                />\n                {els}\n            </>\n        </SvgWidget>\n    )\n}"],"names":["BRAILE_CHARACTERS","$","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Z","Y","_","r","su","s","i","messageRegister","useRegister","CharacterScreenReg","rowsRegister","columnsRegister","textDirectionRegister","variantRegister","brightnessRegister","useRegisterUnpackedValue","useState","handleClear","setFieldMessage","handleFieldMessageChange","ev","useEffect","rows","columns","converter","variant","CharacterScreenVariant","cmessage","message","rtl","textDirection","CharacterScreenTextDirection","expanded","tL","brightness","useWidgetTheme","cw","ch","m","mo","fs","w","h","lines","els","y","row","x","line","column","char","fontFamily","fontWeight","disabled"],"sourceRoot":""}