{"version":3,"file":"7953-b8c26c82b76098dadbe3.js","mappings":"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","sources":["webpack://jacdac-docs/./node_modules/@mui/icons-material/PowerSettingsNew.js","webpack://jacdac-docs/./src/components/dashboard/DashboardBrailleDisplay.tsx","webpack://jacdac-docs/./src/components/widgets/CharacterScreenWidget.tsx"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M13 3h-2v10h2V3zm4.83 2.17-1.42 1.42C17.99 7.86 19 9.81 19 12c0 3.87-3.13 7-7 7s-7-3.13-7-7c0-2.19 1.01-4.14 2.58-5.42L6.17 5.17C4.23 6.82 3 9.26 3 12c0 4.97 4.03 9 9 9s9-4.03 9-9c0-2.74-1.23-5.18-3.17-6.83z\"\n}), 'PowerSettingsNew');\nexports.default = _default;","import React, { ChangeEvent, useEffect, useState } from \"react\"\nimport { BrailleDisplayReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport {\n    useRegisterBoolValue,\n    useRegisterUnpackedValue,\n} from \"../../jacdac/useRegisterValue\"\nimport { Grid, TextField } from \"@mui/material\"\nimport useRegister from \"../hooks/useRegister\"\nimport CmdButton from \"../CmdButton\"\nimport ClearIcon from \"@mui/icons-material/Clear\"\nimport CharacterScreenWidget from \"../widgets/CharacterScreenWidget\"\nimport { useId } from \"react\"\nimport PowerSettingsNewIcon from \"@mui/icons-material/PowerSettingsNew\"\nimport DashboardRegisterValueFallback from \"./DashboardRegisterValueFallback\"\nimport { tL } from \"../translations\"\n\n// https://en.wikipedia.org/wiki/Braille_ASCII\n/** \nconst ascii = \" A1B'K2L@CIF/MSP\\\"E3H9O6R^DJG>NTQ,*5<-U8V.%[$+X!&;:4\\\\0Z7(_?W]#Y)=\"\nconst unicode = \"⠀⠁⠂⠃⠄⠅⠆⠇⠈⠉⠊⠋⠌⠍⠎⠏⠐⠑⠒⠓⠔⠕⠖⠗⠘⠙⠚⠛⠜⠝⠞⠟⠠⠡⠢⠣⠤⠥⠦⠧⠨⠩⠪⠫⠬⠭⠮⠯⠰⠱⠲⠳⠴⠵⠶⠷⠸⠹⠺⠻⠼⠽⠾⠿\"\nconst a0 = \" \".charCodeAt(0)\nlet r = ''\nfor (let i = 0; i < 64; ++i) {\n    const c = String.fromCharCode(a0 + i)\n    const j = ascii.indexOf(c)\n    const u = unicode.charAt(j)\n    r += u\n}\nconsole.log(r)\n */\nfunction brailify(s: string) {\n    if (!s) return s\n    // space char -> unicode character\n    const braille_ascii = \"⠀⠮⠐⠼⠫⠩⠯⠄⠷⠾⠡⠬⠠⠤⠨⠌⠴⠂⠆⠒⠲⠢⠖⠶⠦⠔⠱⠰⠣⠿⠜⠹⠈⠁⠃⠉⠙⠑⠋⠛⠓⠊⠚⠅⠇⠍⠝⠕⠏⠟⠗⠎⠞⠥⠧⠺⠭⠽⠵⠪⠳⠻⠘⠸\"\n    const a0 = \" \".charCodeAt(0)\n    const an = braille_ascii.length\n\n    let r = \"\"\n    const su = s.toLocaleUpperCase()\n    for (let i = 0; i < su.length; ++i) {\n        const c = su.charCodeAt(i)\n        const ai = c - a0\n        if (c >= 0x2800 && c <= 0x28ff) r += String.fromCharCode(c)\n        else if (ai < an) r += braille_ascii.charAt(ai)\n        else r += \"\"\n    }\n    return r\n}\n\nexport default function DashboardBrailleDisplay(props: DashboardServiceProps) {\n    const { service, expanded } = props\n    const textId = useId()\n\n    const patternsRegister = useRegister(service, BrailleDisplayReg.Patterns)\n    const lengthRegister = useRegister(service, BrailleDisplayReg.Length)\n    const enabledRegister = useRegister(service, BrailleDisplayReg.Enabled)\n    const [patterns] = useRegisterUnpackedValue<[string]>(\n        patternsRegister,\n        props\n    )\n    const enabled = useRegisterBoolValue(enabledRegister, props)\n    const [length] = useRegisterUnpackedValue<[number]>(lengthRegister, props)\n\n    const [fieldMessage, setFieldMessage] = useState(patterns)\n    const handleFieldMessageChange = async (\n        ev: ChangeEvent<HTMLTextAreaElement>\n    ) => {\n        const text = ev.target.value\n        const brailled = brailify(text)\n        setFieldMessage(text)\n        await patternsRegister.sendSetStringAsync(brailled, true)\n    }\n    const handleClear = async () => {\n        setFieldMessage(\"\")\n        await patternsRegister.sendSetStringAsync(\"\", true)\n    }\n    const handleEnabled = async () =>\n        await enabledRegister.sendSetBoolAsync(!enabled, true)\n    // set first value of message\n    useEffect(() => {\n        if (!fieldMessage && patterns) setFieldMessage(patterns)\n    }, [patterns])\n\n    if (length === undefined)\n        return <DashboardRegisterValueFallback register={lengthRegister} />\n\n    return (\n        <Grid container spacing={1} alignItems=\"center\">\n            {expanded && (\n                <Grid item xs={12}>\n                    <Grid container spacing={1}>\n                        <Grid item xs>\n                            <TextField\n                                id={textId}\n                                label=\"text\"\n                                helperText=\"Unicode Braille patterns or Braille ASCII\"\n                                aria-label=\"text field to enter Braille unicode pattersn or Braille ASCII\"\n                                value={fieldMessage}\n                                onChange={handleFieldMessageChange}\n                                multiline={false}\n                                fullWidth={true}\n                                disabled={!enabled}\n                            />\n                        </Grid>\n                        <Grid item>\n                            <CmdButton\n                                title={tL(\"clearDisplay\")}\n                                onClick={handleClear}\n                                icon={<ClearIcon />}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n            )}\n            <Grid item xs>\n                <CharacterScreenWidget\n                    rows={1}\n                    columns={length}\n                    message={patterns}\n                    disabled={!enabled}\n                />\n            </Grid>\n            <Grid item>\n                <CmdButton\n                    title={enabled ? \"disable display\" : \"enable display\"}\n                    onClick={handleEnabled}\n                    color={enabled ? \"primary\" : undefined}\n                    icon={<PowerSettingsNewIcon />}\n                />\n            </Grid>\n        </Grid>\n    )\n}\n","import React from \"react\"\nimport SvgWidget from \"../widgets/SvgWidget\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\n\nexport default function CharacterScreenWidget(props: {\n    rows: number\n    columns: number\n    message: string\n    rtl?: boolean\n    disabled?: boolean\n}) {\n    const { rows, columns, message, rtl, disabled } = props\n    const { textPrimary, background, controlBackground } =\n        useWidgetTheme(\"primary\")\n    const cw = 8\n    const ch = 10\n    const m = 1\n    const mo = 2\n    const fs = 8\n\n    const w = columns * (cw + m) - m + 2 * mo\n    const h = rows * (ch + m) - m + 2 * mo\n\n    const lines = (message || \"\").split(/\\n/g)\n    const els: JSX.Element[] = []\n\n    let y = mo\n    for (let row = 0; row < rows; ++row) {\n        let x = mo\n        const line = lines[row]\n        for (let column = 0; column < columns; ++column) {\n            const char = line?.[rtl ? columns - 1 - column : column]\n            els.push(\n                <g key={`${row}-${column}`}>\n                    <rect\n                        x={x}\n                        y={y}\n                        width={cw}\n                        height={ch}\n                        fill={controlBackground}\n                    />\n                    {char && (\n                        <text\n                            x={x + cw / 2}\n                            y={y + ch - fs / 3}\n                            textAnchor=\"middle\"\n                            fontSize={fs}\n                            style={{\n                                fontFamily: \"monospace\",\n                                fontWeight: 100,\n                            }}\n                            fill={disabled ? background : textPrimary}\n                            aria-label={char}\n                        >\n                            {char}\n                        </text>\n                    )}\n                </g>\n            )\n            x += cw + m\n        }\n\n        y += ch + m\n    }\n    return (\n        <SvgWidget\n            tabIndex={0}\n            title={`character screen displaying \"${message}\"`}\n            width={w}\n            height={h}\n        >\n            <>\n                <rect\n                    x={0}\n                    y={0}\n                    width={w}\n                    height={h}\n                    r={m / 2}\n                    fill={background}\n                />\n                {els}\n            </>\n        </SvgWidget>\n    )\n}"],"names":["braille_ascii","a0","an","r","su","s","i","c","ai","String","textId","useId","patternsRegister","useRegister","BrailleDisplayReg","lengthRegister","enabledRegister","useRegisterUnpackedValue","enabled","useRegisterBoolValue","useState","handleFieldMessageChange","text","ev","brailled","brailify","setFieldMessage","handleClear","handleEnabled","useEffect","length","expanded","tL","useWidgetTheme","cw","ch","m","mo","fs","w","columns","h","rows","lines","message","els","y","row","x","line","column","char","rtl","fontFamily","fontWeight","disabled"],"sourceRoot":""}