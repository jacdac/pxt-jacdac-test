{"version":3,"file":"8368-742a851dfbb3819cbe73.js","mappings":"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","sources":["webpack://jacdac-docs/./node_modules/@mui/material/InputAdornment/inputAdornmentClasses.js","webpack://jacdac-docs/./node_modules/@mui/material/InputAdornment/InputAdornment.js","webpack://jacdac-docs/./src/components/shell/DrawerSearchInput.tsx"],"sourcesContent":["import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getInputAdornmentUtilityClass(slot) {\n  return generateUtilityClass('MuiInputAdornment', slot);\n}\nconst inputAdornmentClasses = generateUtilityClasses('MuiInputAdornment', ['root', 'filled', 'standard', 'outlined', 'positionStart', 'positionEnd', 'disablePointerEvents', 'hiddenLabel', 'sizeSmall']);\nexport default inputAdornmentClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _span;\nconst _excluded = [\"children\", \"className\", \"component\", \"disablePointerEvents\", \"disableTypography\", \"position\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport capitalize from '../utils/capitalize';\nimport Typography from '../Typography';\nimport FormControlContext from '../FormControl/FormControlContext';\nimport useFormControl from '../FormControl/useFormControl';\nimport styled from '../styles/styled';\nimport inputAdornmentClasses, { getInputAdornmentUtilityClass } from './inputAdornmentClasses';\nimport useThemeProps from '../styles/useThemeProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst overridesResolver = (props, styles) => {\n  const {\n    ownerState\n  } = props;\n  return [styles.root, styles[`position${capitalize(ownerState.position)}`], ownerState.disablePointerEvents === true && styles.disablePointerEvents, styles[ownerState.variant]];\n};\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disablePointerEvents,\n    hiddenLabel,\n    position,\n    size,\n    variant\n  } = ownerState;\n  const slots = {\n    root: ['root', disablePointerEvents && 'disablePointerEvents', position && `position${capitalize(position)}`, variant, hiddenLabel && 'hiddenLabel', size && `size${capitalize(size)}`]\n  };\n  return composeClasses(slots, getInputAdornmentUtilityClass, classes);\n};\nconst InputAdornmentRoot = styled('div', {\n  name: 'MuiInputAdornment',\n  slot: 'Root',\n  overridesResolver\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  display: 'flex',\n  height: '0.01em',\n  // Fix IE11 flexbox alignment. To remove at some point.\n  maxHeight: '2em',\n  alignItems: 'center',\n  whiteSpace: 'nowrap',\n  color: (theme.vars || theme).palette.action.active\n}, ownerState.variant === 'filled' && {\n  // Styles applied to the root element if `variant=\"filled\"`.\n  [`&.${inputAdornmentClasses.positionStart}&:not(.${inputAdornmentClasses.hiddenLabel})`]: {\n    marginTop: 16\n  }\n}, ownerState.position === 'start' && {\n  // Styles applied to the root element if `position=\"start\"`.\n  marginRight: 8\n}, ownerState.position === 'end' && {\n  // Styles applied to the root element if `position=\"end\"`.\n  marginLeft: 8\n}, ownerState.disablePointerEvents === true && {\n  // Styles applied to the root element if `disablePointerEvents={true}`.\n  pointerEvents: 'none'\n}));\nconst InputAdornment = /*#__PURE__*/React.forwardRef(function InputAdornment(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiInputAdornment'\n  });\n  const {\n      children,\n      className,\n      component = 'div',\n      disablePointerEvents = false,\n      disableTypography = false,\n      position,\n      variant: variantProp\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const muiFormControl = useFormControl() || {};\n  let variant = variantProp;\n  if (variantProp && muiFormControl.variant) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (variantProp === muiFormControl.variant) {\n        console.error('MUI: The `InputAdornment` variant infers the variant prop ' + 'you do not have to provide one.');\n      }\n    }\n  }\n  if (muiFormControl && !variant) {\n    variant = muiFormControl.variant;\n  }\n  const ownerState = _extends({}, props, {\n    hiddenLabel: muiFormControl.hiddenLabel,\n    size: muiFormControl.size,\n    disablePointerEvents,\n    position,\n    variant\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(FormControlContext.Provider, {\n    value: null,\n    children: /*#__PURE__*/_jsx(InputAdornmentRoot, _extends({\n      as: component,\n      ownerState: ownerState,\n      className: clsx(classes.root, className),\n      ref: ref\n    }, other, {\n      children: typeof children === 'string' && !disableTypography ? /*#__PURE__*/_jsx(Typography, {\n        color: \"text.secondary\",\n        children: children\n      }) : /*#__PURE__*/_jsxs(React.Fragment, {\n        children: [position === 'start' ? /* notranslate needed while Google Translate will not fix zero-width space issue */_span || (_span = /*#__PURE__*/_jsx(\"span\", {\n          className: \"notranslate\",\n          children: \"\\u200B\"\n        })) : null, children]\n      })\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? InputAdornment.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component, normally an `IconButton` or string.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Disable pointer events on the root.\n   * This allows for the content of the adornment to focus the `input` on click.\n   * @default false\n   */\n  disablePointerEvents: PropTypes.bool,\n  /**\n   * If children is a string then disable wrapping in a Typography component.\n   * @default false\n   */\n  disableTypography: PropTypes.bool,\n  /**\n   * The position this adornment should appear relative to the `Input`.\n   */\n  position: PropTypes.oneOf(['end', 'start']).isRequired,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The variant to use.\n   * Note: If you are using the `TextField` component or the `FormControl` component\n   * you do not have to set this manually.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default InputAdornment;","import React, { startTransition, useState } from \"react\"\n// tslint:disable-next-line: no-submodule-imports\nimport TextField from \"@mui/material/TextField\"\n// tslint:disable-next-line: no-submodule-imports\nimport { useId } from \"react\"\nimport { InputAdornment } from \"@mui/material\"\nimport ClearIcon from \"@mui/icons-material/Clear\"\nimport IconButtonWithTooltip from \"../ui/IconButtonWithTooltip\"\nimport { delay } from \"../../../jacdac-ts/src/jdom/utils\"\n\nexport default function DrawerSearchInput(props: {\n    searchQuery: string\n    setSearchQuery: (query: string) => void\n}) {\n    const { searchQuery, setSearchQuery } = props\n    const [focused, setFocused] = useState(false)\n    const textId = useId()\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) =>\n        startTransition(() => setSearchQuery(event.target.value))\n    const handleClear = () => setSearchQuery(\"\")\n    const handleFocus = () => setFocused(true)\n    const handleBlur = async () => {\n        await delay(200)\n        setFocused(false)\n    }\n\n    return (\n        <TextField\n            id={textId}\n            label=\"Search\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            type=\"search\"\n            size=\"small\"\n            aria-label=\"Search documentation\"\n            value={searchQuery}\n            onChange={handleChange}\n            onFocus={handleFocus}\n            onBlur={handleBlur}\n            InputProps={\n                focused\n                    ? {\n                          endAdornment: (\n                              <InputAdornment position=\"end\">\n                                  <IconButtonWithTooltip\n                                      trackName=\"search.clear\"\n                                      title=\"clear\"\n                                      size=\"small\"\n                                      onClick={handleClear}\n                                  >\n                                      <ClearIcon />\n                                  </IconButtonWithTooltip>\n                              </InputAdornment>\n                          ),\n                      }\n                    : undefined\n            }\n        />\n    )\n}\n"],"names":["useState","textId","useId","handleChange","event","startTransition","setSearchQuery","handleClear","handleFocus","setFocused","handleBlur","delay","focused","endAdornment"],"sourceRoot":""}