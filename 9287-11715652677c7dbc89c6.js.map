{"version":3,"file":"9287-11715652677c7dbc89c6.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardCursorCharacterScreen.tsx","webpack://jacdac-docs/./src/components/widgets/CharacterScreenWidget.tsx"],"sourcesContent":["import React, { ChangeEvent, useEffect, useState } from \"react\"\nimport {\n    CursorCharacterScreenReg,\n    CursorCharacterScreenCmd,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport { Grid, TextField } from \"@mui/material\"\nimport useRegister from \"../hooks/useRegister\"\nimport CmdButton from \"../CmdButton\"\nimport ClearIcon from \"@mui/icons-material/Clear\"\nimport CharacterScreenWidget from \"../widgets/CharacterScreenWidget\"\nimport DashboardRegisterValueFallback from \"./DashboardRegisterValueFallback\"\nimport { CursorCharacterScreenServer } from \"../../../jacdac-ts/src/servers/cursorcharscreenserver\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport { tL } from \"../translations\"\n\nexport default function DashboardCursorCharacterScreen(props: DashboardServiceProps) {\n    const { service, expanded } = props\n\n    const server = useServiceServer<CursorCharacterScreenServer>(\n        service,\n        () => new CursorCharacterScreenServer()\n    )\n\n    const rowsRegister = useRegister(service, CursorCharacterScreenReg.Rows)\n    const columnsRegister = useRegister(service, CursorCharacterScreenReg.Columns)\n    const enabledRegister = useRegister(service,CursorCharacterScreenReg.Enabled)\n    const [rows] = useRegisterUnpackedValue<[number]>(rowsRegister, props)\n    const [columns] = useRegisterUnpackedValue<[number]>(columnsRegister, props)\n    const [enabled] = useRegisterUnpackedValue<[number]>(\n        enabledRegister,\n        props\n    )\n\n    const [screen, setScreen] = useState<string>(server.screen)\n\n    const [fieldMessage, setFieldMessage] = useState(screen)\n\n    const handleClear = async () => {\n        setFieldMessage(\"\")\n        server.clear()\n    }\n\n    const handleFieldMessageChange = async (\n        ev: ChangeEvent<HTMLTextAreaElement>\n    ) => {\n        setFieldMessage(ev.target.value)\n        server.clear()\n        server.show(ev.target.value)\n    }\n\n    // listen for clear command\n    useEffect(\n        () =>\n            server.subscribe(CursorCharacterScreenServer.UPDATE, () => {\n                setScreen(server.screen)\n            }),\n        [server]\n    )\n\n    if (rows === undefined || columns === undefined)\n        return (\n            <DashboardRegisterValueFallback\n                register={rows === undefined ? rowsRegister : columnsRegister}\n            />\n        ) // size unknown\n\n    return (\n        <Grid container spacing={1}>\n            {expanded && (\n                <Grid item xs={12}>\n                    <Grid container spacing={1}>\n                        <Grid item xs>\n                            <TextField\n                                label={tL(\"text\")}\n                                value={fieldMessage}\n                                onChange={handleFieldMessageChange}\n                                multiline={true}\n                                rows={rows || 2}\n                                fullWidth={true}\n                            />\n                        </Grid>\n                        <Grid item>\n                            <CmdButton\n                                title={tL(\"clear the entire display\")}\n                                onClick={handleClear}\n                                icon={<ClearIcon />}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n            )}\n            <Grid item xs>\n                <CharacterScreenWidget\n                    rows={rows}\n                    columns={columns}\n                    rtl={false}\n                    message={screen}\n                    disabled={enabled === 0}\n                />\n            </Grid>\n        </Grid>\n    )\n}\n","import React from \"react\"\nimport SvgWidget from \"../widgets/SvgWidget\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\n\nexport default function CharacterScreenWidget(props: {\n    rows: number\n    columns: number\n    message: string\n    rtl?: boolean\n    disabled?: boolean\n}) {\n    const { rows, columns, message, rtl, disabled } = props\n    const { textPrimary, background, controlBackground } =\n        useWidgetTheme(\"primary\")\n    const cw = 8\n    const ch = 10\n    const m = 1\n    const mo = 2\n    const fs = 8\n\n    const w = columns * (cw + m) - m + 2 * mo\n    const h = rows * (ch + m) - m + 2 * mo\n\n    const lines = (message || \"\").split(/\\n/g)\n    const els: JSX.Element[] = []\n\n    let y = mo\n    for (let row = 0; row < rows; ++row) {\n        let x = mo\n        const line = lines[row]\n        for (let column = 0; column < columns; ++column) {\n            const char = line?.[rtl ? columns - 1 - column : column]\n            els.push(\n                <g key={`${row}-${column}`}>\n                    <rect\n                        x={x}\n                        y={y}\n                        width={cw}\n                        height={ch}\n                        fill={controlBackground}\n                    />\n                    {char && (\n                        <text\n                            x={x + cw / 2}\n                            y={y + ch - fs / 3}\n                            textAnchor=\"middle\"\n                            fontSize={fs}\n                            style={{\n                                fontFamily: \"monospace\",\n                                fontWeight: 100,\n                            }}\n                            fill={disabled ? background : textPrimary}\n                            aria-label={char}\n                        >\n                            {char}\n                        </text>\n                    )}\n                </g>\n            )\n            x += cw + m\n        }\n\n        y += ch + m\n    }\n    return (\n        <SvgWidget\n            tabIndex={0}\n            title={`character screen displaying \"${message}\"`}\n            width={w}\n            height={h}\n        >\n            <>\n                <rect\n                    x={0}\n                    y={0}\n                    width={w}\n                    height={h}\n                    r={m / 2}\n                    fill={background}\n                />\n                {els}\n            </>\n        </SvgWidget>\n    )\n}"],"names":["server","useServiceServer","rowsRegister","useRegister","CursorCharacterScreenReg","columnsRegister","enabledRegister","useRegisterUnpackedValue","useState","handleClear","setFieldMessage","handleFieldMessageChange","ev","useEffect","CursorCharacterScreenServer","setScreen","rows","columns","expanded","tL","enabled","useWidgetTheme","cw","ch","m","mo","fs","w","h","lines","message","els","y","row","x","line","column","char","rtl","fontFamily","fontWeight","disabled"],"sourceRoot":""}