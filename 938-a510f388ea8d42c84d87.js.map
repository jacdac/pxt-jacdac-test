{"version":3,"file":"938-a510f388ea8d42c84d87.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/ec30/EC30Editor.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Grid } from \"@mui/material\"\nimport React, { lazy, useId, useState } from \"react\"\nimport { generateEC30EnclosureModel } from \"../enclosure/ec30\"\nimport SliderWithLabel from \"../ui/SliderWithLabel\"\nimport Suspense from \"../ui/Suspense\"\nconst EC30Card = lazy(() => import(\"./EC30Card\"))\n\nexport default function EC30Editor() {\n    const [gridWidth, setGridWith] = useState(2)\n    const [gridHeight, setGridHeight] = useState(2)\n    const [connectors, setConnectors] = useState({\n        l: 1,\n        r: 1,\n    })\n    const id = useId()\n    const gridHeightId = id + \"-height\"\n    const gridWidthId = id + \"-width\"\n    const lconnectorId = id + \"-l-connectors\"\n    const rconnectorId = id + \"-r-connectors\"\n\n    const handleGridWidth: any = (\n        event: React.ChangeEvent<unknown>,\n        value: number | number[]\n    ) => setGridWith(value as number)\n    const handleGridHeight: any = (\n        event: React.ChangeEvent<unknown>,\n        value: number | number[]\n    ) => {\n        const v = value as number\n        setGridHeight(v)\n        setConnectors({\n            l: Math.min(connectors.l, v - 1),\n            r: Math.min(connectors.r, v - 1),\n        })\n    }\n    const handleLeftConnector: any = (\n        event: React.ChangeEvent<unknown>,\n        value: number | number[]\n    ) => setConnectors({ ...connectors, l: value as number })\n    const handleRightConnector: any = (\n        event: React.ChangeEvent<unknown>,\n        value: number | number[]\n    ) => setConnectors({ ...connectors, r: value as number })\n\n    const c = Object.entries(connectors)\n        .map(([key, value]) =>\n            value > 0 ? `${key}${value > 1 ? value : \"\"}` : \"\"\n        )\n        .join(\"\")\n    const model = generateEC30EnclosureModel(gridWidth, gridHeight, c, 1.6)\n    return (\n        <Grid container spacing={2}>\n            <Grid item>\n                <SliderWithLabel\n                    id={gridWidthId}\n                    label={`grid width: ${gridWidth * 10}mm`}\n                    value={gridWidth}\n                    onChange={handleGridWidth}\n                    min={1}\n                    max={12}\n                />\n            </Grid>\n            <Grid item>\n                <SliderWithLabel\n                    id={gridHeightId}\n                    label={`grid height: ${gridHeight * 10}mm`}\n                    value={gridHeight}\n                    onChange={handleGridHeight}\n                    min={2}\n                    max={12}\n                />\n            </Grid>\n            <Grid item>\n                <SliderWithLabel\n                    id={lconnectorId}\n                    label={`left connectors: ${connectors.l || 0}`}\n                    value={connectors.l}\n                    onChange={handleLeftConnector}\n                    min={1}\n                    max={gridHeight - 1}\n                />\n            </Grid>\n            <Grid item>\n                <SliderWithLabel\n                    id={rconnectorId}\n                    label={`right connectors: ${connectors.r || 0}`}\n                    value={connectors.r}\n                    onChange={handleRightConnector}\n                    min={0}\n                    max={gridHeight - 1}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Suspense>\n                    <EC30Card model={model} showSave={true} />\n                </Suspense>\n            </Grid>\n        </Grid>\n    )\n}\n"],"names":["EC30Card","lazy","useState","l","r","id","useId","gridHeightId","gridWidthId","lconnectorId","rconnectorId","handleGridWidth","setGridWith","handleGridHeight","v","setGridHeight","setConnectors","Math","connectors","handleLeftConnector","handleRightConnector","c","Object","value","model","generateEC30EnclosureModel","gridWidth","gridHeight"],"sourceRoot":""}